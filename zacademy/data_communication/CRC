#6 Write a program to implement a CRC (Cyclic Redundancy Code) error detection model.

def xor(a, b):
    # Perform XOR operation
    result = []
    for i in range(1, len(b)):
        if a[i] == b[i]:
            result.append('0')
        else:
            result.append('1')
    return ''.join(result)

def mod2div(dividend, divisor):
    # Perform Modulo-2 division
    pick = len(divisor)
    tmp = dividend[:pick]

    while pick < len(dividend):
        if tmp[0] == '1':
            tmp = xor(divisor, tmp) + dividend[pick]
        else:
            tmp = xor('0'*pick, tmp) + dividend[pick]

        pick += 1

    if tmp[0] == '1':
        tmp = xor(divisor, tmp)
    else:
        tmp = xor('0'*pick, tmp)

    return tmp

def encode_data(data, key):
    # Append zeros to the data
    l_key = len(key)
    appended_data = data + '0'*(l_key-1)
    remainder = mod2div(appended_data, key)

    # Append the remainder to the original data
    codeword = data + remainder
    return codeword

def decode_data(codeword, key):
    remainder = mod2div(codeword, key)
    return remainder

# Example usage
data = "11010011101100"
key = "1011"

print("Original Data: ", data)
codeword = encode_data(data, key)
print("Encoded Data: ", codeword)

# Simulating transmission with error (no error introduced in this case)
received_codeword = codeword
print("Received Data: ", received_codeword)

# Checking for errors
remainder = decode_data(received_codeword, key)
if '1' in remainder:
    print("Error detected in the received data.")
else:
    print("No error detected in the received data.")

